import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from datetime import datetime
from dateutil import parser

# ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡¶æ‡¶∏ ‡¶ì ‡¶ã‡¶§‡ßÅ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç
BANGLA_MONTHS = {
    1: ("‡¶¨‡ßà‡¶∂‡¶æ‡¶ñ", "‡¶ó‡ßç‡¶∞‡ßÄ‡¶∑‡ßç‡¶Æ"),
    2: ("‡¶ú‡ßç‡¶Ø‡ßà‡¶∑‡ßç‡¶†", "‡¶ó‡ßç‡¶∞‡ßÄ‡¶∑‡ßç‡¶Æ"),
    3: ("‡¶Ü‡¶∑‡¶æ‡¶¢‡¶º", "‡¶¨‡¶∞‡ßç‡¶∑‡¶æ"),
    4: ("‡¶∂‡ßç‡¶∞‡¶æ‡¶¨‡¶£", "‡¶¨‡¶∞‡ßç‡¶∑‡¶æ"),
    5: ("‡¶≠‡¶æ‡¶¶‡ßç‡¶∞", "‡¶∂‡¶∞‡ßé"),
    6: ("‡¶Ü‡¶∂‡ßç‡¶¨‡¶ø‡¶®", "‡¶∂‡¶∞‡ßé"),
    7: ("‡¶ï‡¶æ‡¶∞‡ßç‡¶§‡¶ø‡¶ï", "‡¶π‡ßá‡¶Æ‡¶®‡ßç‡¶§"),
    8: ("‡¶Ö‡¶ó‡ßç‡¶∞‡¶π‡¶æ‡¶Ø‡¶º‡¶£", "‡¶π‡ßá‡¶Æ‡¶®‡ßç‡¶§"),
    9: ("‡¶™‡ßå‡¶∑", "‡¶∂‡ßÄ‡¶§"),
    10: ("‡¶Æ‡¶æ‡¶ò", "‡¶∂‡ßÄ‡¶§"),
    11: ("‡¶´‡¶æ‡¶≤‡ßç‡¶ó‡ßÅ‡¶®", "‡¶¨‡¶∏‡¶®‡ßç‡¶§"),
    12: ("‡¶ö‡ßà‡¶§‡ßç‡¶∞", "‡¶¨‡¶∏‡¶®‡ßç‡¶§"),
}

# ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ
SPECIAL_DAYS = {
    (4, 14): "‡¶™‡¶π‡ßá‡¶≤‡¶æ ‡¶¨‡ßà‡¶∂‡¶æ‡¶ñ",
    (12, 16): "‡¶¨‡¶ø‡¶ú‡¶Ø‡¶º ‡¶¶‡¶ø‡¶¨‡¶∏",
    (3, 26): "‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶§‡¶æ ‡¶¶‡¶ø‡¶¨‡¶∏",
}

# ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü‡¶æ‡¶∞ (‡¶∏‡¶∞‡¶≤‡ßÄ‡¶ï‡ßÉ‡¶§)
def english_to_bangla_date(english_date):
    try:
        date_obj = parser.parse(english_date)
        day = date_obj.day
        month = date_obj.month
        year = date_obj.year - 593  # ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡¶® (‡¶Ü‡¶®‡ßÅ‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï)
        
        bangla_month, season = BANGLA_MONTHS.get(month, ("‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ", ""))
        special_day = SPECIAL_DAYS.get((month, day), "")
        
        return f"{day} {bangla_month}, {year} ({season})", special_day
    except Exception as e:
        return None, None

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def date_command(update: Update, context: CallbackContext):
    user_input = " ".join(context.args)
    if not user_input:
        update.message.reply_text("‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /date <YYYY-MM-DD> (‡¶Ø‡ßá‡¶Æ‡¶®: /date 2024-04-14)")
        return
    
    bangla_date, special_day = english_to_bangla_date(user_input)
    if bangla_date:
        response = f"üìÖ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø: {user_input}\n"
        response += f"üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ: {bangla_date}\n"
        if special_day:
            response += f"üéâ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶¶‡¶ø‡¶®: **{special_day}**"
        update.message.reply_text(response)
    else:
        update.message.reply_text("‚ùå ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (YYYY-MM-DD)‡•§")

def time_now(update: Update, context: CallbackContext):
    now = datetime.now()
    bangla_date, _ = english_to_bangla_date(now.strftime("%Y-%m-%d"))
    response = f"üïí ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º: {now.strftime('%I:%M %p')}\n"
    response += f"üìÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {bangla_date}"
    update.message.reply_text(response)

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def main():
    # ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
    TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    dp.add_handler(CommandHandler("date", date_command, pass_args=True))
    dp.add_handler(CommandHandler("time", time_now))

    # ‡¶≤‡¶ó‡¶ø‡¶Ç
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
